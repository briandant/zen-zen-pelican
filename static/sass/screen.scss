/* Welcome to Compass.
 * In this file you should write your main styles. (or centralize your imports)
 * Import this file using the following HTML or equivalent:
 * <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css" /> */

@import "compass/reset";

// Zen setup
$zen-gutter-width: 3% !default;
@import "zen";

// Misc imports
@import "compass/typography/vertical_rhythm";

// Fonts
@import url(http://fonts.googleapis.com/css?family=Merriweather+Sans:400,300|Merriweather:400,400italic,700|Inconsolata:400,700);


$index-width: 1200px;
$article-width: 700px;

$border-radius: 1px;

// Mixins
@mixin headline {
  font-family: 'Merriweather Sans', sans-serif;
  font-weight: 300;
  text-shadow: 0 0.5px 0.5px #c5c5c5;
}

@mixin aside {  // TODO:  Why is this a mixin?  Is this just for aside?
  font-family: 'Merriweather Sans', sans-serif;
  font-weight: 300;
}

@mixin centering ($max-width) {
  margin-left: auto;
  margin-right: auto;
  max-width: $max-width;
}

@mixin secondary-background {
    background-color: $base2;
    border-radius: $border-radius;
}

@mixin nav-and-footer-padding {
    padding-top: 1.5%;
    padding-bottom: 1%;
}

@mixin passive-headline-links {
    &:link {text-decoration:none;}
    &:visited {text-decoration:none;}
    &:hover {text-decoration:underline;}
    &:active {text-decoration:underline;}
}

@mixin inset-box {
    padding: 24px;
    box-shadow: inset 0 0 9px rgba(0,0,0,.17);
    -moz-box-shadow: inset 0 0 9px rgba(0,0,0,.17);
    -webkit-box-shadow: inset 0 0 9px rgba(0,0,0,.17);
}

@mixin seperating-border {
    border-bottom: 1px solid;
    margin-bottom: 3%;
    padding-bottom: 3%;
}


// Solarized via http://ethanschoonover.com/solarized
// Background Tones (Dark)
$base03:    #002b36;
$base02:    #073642;

// Content Tones
$base01:    #586e75; // (headings; font active and visited)
$base00:    #657b83; // (default font-color; default header border-color)
$base0:     #839496;
$base1:     #93a1a1; // (summary) 

// Background Tones (Light)
$base2:     #eee8d5; // (code and blockquote backgrounds; call-out borders)
$base3:     #fdf6e3; // (body background)

// Accent Colors
$yellow:    #b58900;
$orange:    #cb4b16;
$red:       #dc322f;
$magenta:   #d33682;
$violet:    #6c71c4;
$blue:      #268bd2;
$cyan:      #2aa198;
$green:     #859900;

@mixin rebase($rebase03,$rebase02,$rebase01,$rebase00,$rebase0,$rebase1,$rebase2,$rebase3) {
    background-color:$rebase03;
    color:$rebase0;
    * { color:$rebase0; }
    h1,h2,h3,h4,h5,h6 { color:$rebase1; border-color: $rebase0; }
    a, a:active, a:visited { color: $rebase1; }
}

@mixin accentize($accent) {
    a, a:active, a:visited, code.url { color: $accent; }
    h1,h2,h3,h4,h5,h6 {color:$accent}
}

/* light is default mode, so pair with general html definition */
html, .light { 
    @include rebase($base3,$base2,$base1,$base0,$base00,$base01,$base02,$base03)
}

.dark { 
    @include rebase($base03,$base02,$base01,$base00,$base0,$base1,$base2,$base3)
    }

html * {
    color-profile: sRGB;
}

// Vertical Rhythm
// This structure is based on this blog post: http://24ways.org/2006/compose-to-a-vertical-rhythm/

$base-line-height: 27px;

$base-font-size: 18px;
$tiny-stuff-font-size: 10px;
$h1-font-size: 39px;
$h2-font-size: 32px;
$h3-font-size: 25px;

$round-to-nearest-half-line: true;
@include establish-baseline;

// Typography / spacing / vertical rhythm implementation

body {
    font-family: 'Merriweather', serif;

    h1,h2,h3,h4,h5,h6 {
      @include headline;
          a { 
            @include passive-headline-links;
        }

      @include rhythm($leader: 1, $trailer: .25);
    }

    h1 {
        @include adjust-font-size-to($h1-font-size);
        @include leader();
    }

    h2 {
        @include adjust-font-size-to($h2-font-size);
    }

    h3 {
        @include adjust-font-size-to($h3-font-size);
    }

    p {
        @include leader();
        @include trailer(); 
    }

    ul, ol {
        @include trailer();
    }

    a {
        &:link {text-decoration:underline;}
        &:visited {text-decoration:underline;}
        &:hover {
            text-decoration:underline;
        }

        &:active {text-decoration:underline;}
    }

}


/////////////////////////////////////////////////
// Wide scope helpers / utilities / base styles //
/////////////////////////////////////////////////

// Element level

ol {
    list-style-type: upper-roman;
}

ul {
    list-style-type: disc;
}

em {
    font-style: italic;
}

strong {
    font-weight: bold;
}

cite, .code, tt.docutils.literal {
    font-family: 'Inconsolata', sans-serif;
}

.code, tt.docutils.literal, pre.literal-block {
    @include secondary-background;
}

tt.docutils.literal {
    padding: 2px 4px;
}

.code, pre.literal-block, .contents.topic, em.summary p {
    @include padding-leader();
    @include padding-trailer();
    @include apply-side-rhythm-border(left, $border-style: none);
    @include apply-side-rhythm-border(right, $border-style: none);
    @include margin-trailer()
//    @include debug-vertical-alignment;
//    padding: 
}

blockquote {
    background-color: $base2;
    font-style: italic;
}

section.content, 
.wrapper-nav-inner, 
.wrapper-footer-inner {
    @include centering($article-width);
    @include zen-grid-item-base();
}

footer address {
    @include headline;
    font-size: 10px;
}

div.inner-box {
    @include inset-box;
}

.entry-title, {
    display: inline-block;
    max-width: 89%;

    @media (max-width: 600px) {
        max-width: 80%;
    }
}

abbr.published {  // Dates
    @include headline;
    @include adjust-font-size-to($tiny-stuff-font-size);
    margin-left: 5px;
}

a {
    &.footnote-reference {
        vertical-align: top;
        font-size: 10px;
        @include passive-headline-links;
    }

    &.fn-backref {
        @include passive-headline-links;
    }
}

.contents.topic {
    @include secondary-background;

    .topic-title {
        @include adjust-font-size-to($h3-font-size);
    }

    ul {
        list-style-type: none;
        margin-left: $zen-gutter-width;
    }
}


/////////////////////////
// Page specific stuff //
/////////////////////////

// Article pages
body.article {

    header {
        display: inline-block;
        width: 100%;
    }

    em.summary {

        p {
            @include secondary-background;

            .first.last {
            font-style: italic;
            font-color: $base0;
            }
        }
    }

    .section p {
          @include rhythm($leader: 0, $trailer: 1);
    }

    dd ul {
        margin-left: $zen-gutter-width;

        p.first {
          @include rhythm($leader: 0, $trailer: 0);
        }
    }
}

// Index page

body.index {
    
    h2 {
        @include leader();
    }

    ul {
        list-style-type: none;
    }

    article {
        &.hentry {
            @include trailing-border(1px, 1, $base-font-size, solid);
        }
    }

}


section.content {
    @include zen-grid-container();
    $zen-column-count: 2;

    .right-column {
        @include zen-grid-item(1, 1, right);

        @media (max-width: 600px) {
            @include zen-grid-item(2, 1);
            @include zen-clear();
            margin-top: 2%;
        }
    }

    .left-column {
        @include zen-grid-item(1, 1);

        @media (max-width: 600px) {
            @include zen-grid-item(2, 1);
        }
    }
}


// Pygments / code styling

.code.python {
  color: $base00;

  .emphasized { color: $base01; font-weight: bold; }
  
  // Style for line numbers
  .ln { color: $base1; }

  .bp { color: $base1; } // Name.Builtin.Pseudo
  .c { color: $base1; font-style: italic } // Comment
  .c1 { color: $base1; font-style: italic } // Comment.Single
  .cm { color: $base1; font-style: italic } // Comment.Multiline
  .cp { color: $red; font-weight: bold } // Comment.Preproc
  .cs { color: $base1; font-weight: bold; font-style: italic } // Comment.Special
  .err { color: $base00; background-color: $red; } // Error
  .gd .x { color: $base00; background-color: $magenta; } // Generic.Deleted.Specific
  .gd { color: $base00; background-color: $magenta; } // Generic.Deleted
  .ge { font-style: italic; } // Generic.Emph
  .gh { color: $base1; } // Generic.Heading
  .gi .x { color: $base00; background-color: $base2; } // Generic.Inserted.Specific
  .gi { color: $green; background-color: $base2; } // Generic.Inserted
  .go { color: $base00; } // Generic.Output
  .gp { color: $base01; } // Generic.Prompt
  .gr { color: $base00; background-color: $red; } // Generic.Error
  .gs { @extend .emphasized; } // Generic.Strong
  .gt { color: $red; background-color: $base2; } // Generic.Traceback
  .gu { color: $base01; } // Generic.Subheading
  .il { color: $magenta; } // Literal.Number.Integer.Long
  .k { color: $blue; font-weight: bold; } // Keyword
  .kc { @extend .emphasized; } // Keyword.Constant
  .kd { @extend .emphasized; } // Keyword.Declaration
  .kp { @extend .emphasized; } // Keyword.Pseudo
  .kr { @extend .emphasized; } // Keyword.Reserved
  .kt { color: $blue; font-weight: bold } // Keyword.Type
  .m { color: $magenta; } // Literal.Number
  .mf { color: $magenta; } // Literal.Number.Float
  .mh { color: $magenta; } // Literal.Number.Hex
  .mi { color: $magenta; } // Literal.Number.Integer
  .mo { color: $magenta; } // Literal.Number.Oct
  .n { color: $base01; } // Name
  .na { color: $base1; } // Name.Attribute
  .nb { color: $cyan; } // Name.Builtin
  .nc { color: $blue; font-weight: bold } // Name.Class
  .ne { color: $blue; font-weight: bold } // Name.Exception
  .nf { color: $blue; font-weight: bold } // Name.Function
  .ni { color: $base0; } // Name.Entity
  .nl { color: $green; }
  .nn { color: $orange; } // Name.Namespace
  .no { color: $yellow; } // Name.Constant
  .nt { color: $blue; font-weight: bold; } // Name.Tag
  .nv { color: $yellow; } // Name.Variable
  .p { color: $base01; } // Parentheses
  .o { color: $violet; } // Operator
  .ow { font-weight: bold } // Operator.Word
  .s { color: $cyan; } // Literal.String
  .s1 { color: $cyan; } // Literal.String.Single
  .s2 { color: $cyan; } // Literal.String.Double
  .sb { color: $cyan; } // Literal.String.Backtick
  .sc { color: $cyan; } // Literal.String.Char
  .sd { color: $cyan; } // Literal.String.Doc
  .se { color: $cyan; } // Literal.String.Escape
  .sh { color: $cyan; } // Literal.String.Heredoc
  .si { color: $cyan; } // Literal.String.Interpol
  .sr { color: $green; } // Literal.String.Regex
  .ss { color: $magenta; } // Literal.String.Symbol
  .sx { color: $red; } // Literal.String.Other
  .vc { color: $yellow; } // Name.Variable.Class
  .vg { color: $yellow; } // Name.Variable.Global
  .vi { color: $yellow; } // Name.Variable.Instance
  .w { color: $base2; } // Text.Whitespace
}
